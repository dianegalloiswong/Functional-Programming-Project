J'ai effectué les tâches 1 à 5 du sujet.

J'ai implémenté toutes les optimisations suggérées par les exemples du fichier tests/optims. De plus, lorsqu'une coercion est appliquée à une construction "let", je passe la coercion à l'intérieur de "let" pour essayer de faire apparaître de nouvelles optimisations. L'inconvénient est que cela peut aussi faire disparaître des optimisations, mais j'ai plus d'optimisations qui requièrent une coercion avec à l'intérieur une construction autre que "let", que d'optimisations qui seraient possibles dans le cas initial.




Remarques sur l'application de coercion de la forme Crecord dans Expand.ml :

Si l'expression Lambda à traiter représentant l'enregistrement est un n-uplet, j'utilise directement List.nth pour accéder à ses champs. Sinon, j'utilise le constructeur Lfield pour accéder aux champs, en m'assurant que je travaille sur une variable représentant l'enregistrement afin de ne pas calculer celui-ci plusieurs fois.

J'ai envisagé de remplacer ceci par une optimisation correspondante dans Optimize.ml : transformer une coercion de forme Crecord appliquée à un n-uplet en un n-uplet réordonné, avec des coercions distribuées sur chaque champ. Ce serait facile à faire à l'endroit où j'optimise la coercion de grand enregistrement en plus petit enregistrement (même condition : application de Crecord à un n-uplet ; le réordonnement est même effectué). J'ai finalement décidé de ne pas le faire. Encore une fois, cela peut faire disparaître des optimisations et en faire apparaître d'autres. Dans ce cas-ci, j'avais en tête l'exemple de la projection de champ suite à une coercion de type Crecord, qui n'existerait plus si les coercions pour chaque champ sont distribuées.
